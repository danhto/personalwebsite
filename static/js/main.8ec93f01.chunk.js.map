{"version":3,"sources":["logo.svg","assets/irobot.jpg","assets/knowledge.png","assets/cat.jpg","assets/grandcanyon.jpg","assets/iceland.jpg","assets/japan.jpg","assets/leafs.jpg","assets/prague.jpg","assets/snowboarding.jpg","components/MDBJumbotron/MDBJumbotron.tsx","components/MDBPills/MDBPills.tsx","components/Aboutme/Aboutme.tsx","App.tsx","serviceWorker.ts","components/Links/Links.tsx","components/Navigation/Navigation.tsx","components/MDBPanel/MDBPanel.tsx","components/MDBPanel/MDBPanelStarwars.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","robot","require","knowledge","cat","grandcanyon","iceland","japan","leafs","prague","snowboarding","descriptionArray","MDBJumbotronV2","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getLeadContent","display","react_default","a","createElement","className","src","handleCat","setState","text","counter","handleLeafs","handleSnowboarding","handleJapan","handleIceland","handlePrague","handleCanyon","updateHeader","console","log","ct","state","getBodyContent","mdbreact_esm","value","color","index_es","naturalSlideWidth","naturalSlideHeight","totalSlides","isPlaying","autoPlay","interval","slide","onClick","index","setInterval","leadContent","bodyContent","title","React","Component","Pills","items","default","togglePills","type","tab","e","objectSpread","md","to","active","activeItem","tabId","MDBJumbotron","Aboutme","MDBPills","App","_useState","useState","_useState2","slicedToArray","visible","setVisible","gradient","href","react_router","path","component","outline","logo","alt","Boolean","window","location","hostname","match","Links","Navigation","isOpen","toggleCollapse","fluid","dark","expand","id","navbar","left","right","waves","placeholder","aria-label","PanelPage","weather","locale","country","description","icon","temperature","dataReady","errors","formatTemperature","pStyle","style","_this2","width","marginTop","isGeolocationEnabled","coords","lattlong","latitude","longitude","axios","get","then","response","data","name","sys","main","temp","catch","error","status","getWeatherData","Fragment","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","MDBPanelStarwars","getStarwarsData","api","person","birth_year","gender","hair_color","height","mass","skin_color","homeworld","species","dataRetrieved","planet","climate","diameter","population","terrain","starship","cargo_capacity","cost_in_credits","crew","length","model","passengers","starship_class","Math","floor","random","pData","sData","getStarwarsContent","ReactDOM","render","react_router_dom","components_Navigation_Navigation","exact","from","MDBPanel","MDBPanel_MDBPanelStarwars","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec93f01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/irobot.b3e1e89a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/knowledge.6e575bdb.png\";","module.exports = __webpack_public_path__ + \"static/media/cat.4d284ef0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/grandcanyon.06c39b60.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iceland.6fb9952f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/japan.24e968b6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/leafs.df616bb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/prague.df34e8fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snowboarding.446e9b3d.jpg\";","import React from 'react'\r\nimport { MDBJumbotron, MDBContainer, MDBRow, MDBCol, MDBProgress, MDBBadge } from \"mdbreact\";\r\nimport { CarouselProvider, Slider, Slide, ImageWithZoom, Dot } from 'pure-react-carousel';\r\nconst robot = require('../../assets/irobot.jpg')\r\nconst knowledge = require('../../assets/knowledge.png')\r\nconst cat = require('../../assets/cat.jpg')\r\nconst grandcanyon = require('../../assets/grandcanyon.jpg')\r\nconst iceland = require('../../assets/iceland.jpg')\r\nconst japan = require('../../assets/japan.jpg')\r\nconst leafs = require('../../assets/leafs.jpg')\r\nconst prague = require('../../assets/prague.jpg')\r\nconst snowboarding = require('../../assets/snowboarding.jpg')\r\n\r\ninterface Props {\r\n    display: number,\r\n    title: string\r\n}\r\n\r\ninterface State {\r\n    text: string,\r\n    autoPlay: boolean,\r\n    counter: number\r\n}\r\n\r\nconst descriptionArray = [\r\n    \"My dog, Cat!\",\r\n    \"Hockey: The Toronto Maple Leafs!\",\r\n    \"Snowboarding!\",\r\n    \"Traveling: Japan!\",\r\n    \"Traveling: Prague!\",\r\n    \"Traveling: Iceland!\",\r\n    \"Traveling: Grand Canyon!\",\r\n]\r\n\r\nclass MDBJumbotronV2 extends React.Component<Props,State> {\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            text: descriptionArray[0],\r\n            autoPlay: true,\r\n            counter: 0,\r\n        }\r\n    }\r\n\r\n    getLeadContent = () => {\r\n        if (this.props.display === 1) {\r\n            //return <p className='lead'>DAN TO</p>\r\n        }\r\n        else if (this.props.display === 2) {\r\n            return (\r\n                <div className=\"skill-title-content\">\r\n                    <p>\r\n                        My proficiencies are many, but here are a few of my more notable ones!\r\n                        <br />\r\n                        Each skill is conveniently paired with an indicator of my comfort with it.\r\n                    </p>\r\n                    <img src={knowledge} />\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.display === 3) {\r\n            return (\r\n                <p>\r\n                    These are some of the things that fuel my soul!\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleCat = () => {\r\n        this.setState({\r\n            text: \"My dog, Cat!\",\r\n            counter: 0\r\n        })\r\n    }\r\n\r\n    handleLeafs = () => {\r\n        this.setState({\r\n            text: \"Hockey: The Toronto Maple Leafs!\",\r\n            counter: 1\r\n        })\r\n    }\r\n\r\n    handleSnowboarding = () => {\r\n        this.setState({\r\n            text: \"Snowboarding!\",\r\n            counter: 2\r\n        })\r\n    }\r\n\r\n    handleJapan = () => {\r\n        this.setState({\r\n            text: \"Traveling: Japan!\",\r\n            counter: 3\r\n        })\r\n    }\r\n\r\n    handleIceland = () => {\r\n        this.setState({\r\n            text: \"Traveling: Iceland!\",\r\n            counter: 5\r\n        })\r\n    }\r\n\r\n    handlePrague = () => {\r\n        this.setState({\r\n            text: \"Traveling: Prague!\",\r\n            counter: 4\r\n        })\r\n    }\r\n\r\n    handleCanyon = () => {\r\n        this.setState({\r\n            text: \"Traveling: Grand Canyon!\",\r\n            counter: 6\r\n        })\r\n    }\r\n\r\n    updateHeader = () => {\r\n        console.log(\"Updating header...\")\r\n        var ct = this.state.counter == 6 ? 0 : this.state.counter + 1\r\n\r\n        this.setState({\r\n            counter: ct,\r\n            text: descriptionArray[ct]\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(this.updateHeader, 7500)\r\n    }\r\n\r\n    getBodyContent = () => {\r\n        if (this.props.display === 1) {\r\n            return (\r\n                <div>\r\n                    <p>\r\n                        I was born and raised in Toronto, Canada. I graduated from \r\n                        York University with a Bachelor of Engineering in Computer Engineering \r\n                        and a Bachelor of Arts in Psychology. With these experiences I \r\n                        have obtained a certain set of skills, that many often describe \r\n                        as giving me special, nearly unfair, mastery over all things \r\n                        <b> human</b> and <b>machine</b>!\r\n                    </p>\r\n                    <img src={robot} />\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.display === 2) {\r\n            return (\r\n                <div className=\"skill-summary\">\r\n                    <div className=\"skill-languages\">\r\n                        <h4>Java</h4>\r\n                        <MDBProgress value={80} color=\"red\" className='my-2' />\r\n                        <h4>HTML/CSS</h4>\r\n                        <MDBProgress value={60} className='my-2' />\r\n                        <h4>Go Lang</h4>\r\n                        <MDBProgress value={50} className='my-2' />\r\n                        <h4>React</h4>\r\n                        <MDBProgress value={40} className='my-2' />\r\n                        <h4>Typescript/JS</h4>\r\n                        <MDBProgress value={30} className='my-2' />\r\n                        <h4>Python</h4>\r\n                        <MDBProgress value={30} className='my-2' />\r\n                    </div>\r\n                    <div className=\"skill-others\">\r\n                        <h4>Agile</h4>\r\n                        <MDBProgress value={90} className='my-2' />\r\n                        <h4>REST</h4>\r\n                        <MDBProgress value={65} className='my-2' />\r\n                        <h4>Docker</h4>\r\n                        <MDBProgress value={60} className='my-2' />\r\n                        <h4>Design</h4>\r\n                        <MDBProgress value={60} className='my-2' />    \r\n                        <h4>Travis</h4>\r\n                        <MDBProgress value={30} className='my-2' />\r\n                        \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.display === 3) {\r\n            return (\r\n                <div>\r\n                    <div>\r\n                    <MDBBadge className=\"mdb-badge-header\" color=\"primary\">{this.state.text}</MDBBadge>\r\n                    </div>\r\n                    <CarouselProvider\r\n                        naturalSlideWidth={750}\r\n                        naturalSlideHeight={475}\r\n                        totalSlides={7}\r\n                        isPlaying={this.state.autoPlay}\r\n                        interval={7500}\r\n                        >\r\n                        <Dot slide={0} onClick={this.handleCat}>{}</Dot>\r\n                        <Dot slide={1} onClick={this.handleLeafs}>{}</Dot>\r\n                        <Dot slide={2} onClick={this.handleSnowboarding}>{}</Dot>\r\n                        <Dot slide={3} onClick={this.handleJapan}>{}</Dot>\r\n                        <Dot slide={4} onClick={this.handlePrague}>{}</Dot>\r\n                        <Dot slide={5} onClick={this.handleIceland}>{}</Dot>\r\n                        <Dot slide={6} onClick={this.handleCanyon}>{}</Dot>\r\n                        <Slider>\r\n                            <Slide className=\"slide-image-holder\" index={0}>\r\n                                <ImageWithZoom src={cat} />\r\n                            </Slide>\r\n                            <Slide className=\"slide-image-holder\" index={1}>\r\n                                <ImageWithZoom src={leafs} />\r\n                            </Slide>\r\n                            <Slide className=\"slide-image-holder\" index={2}>\r\n                                <ImageWithZoom src={snowboarding} />\r\n                            </Slide>\r\n                            <Slide className=\"slide-image-holder\" index={3}>\r\n                                <ImageWithZoom src={japan} />\r\n                            </Slide>\r\n                            <Slide className=\"slide-image-holder\" index={4}>\r\n                                <ImageWithZoom src={prague} />\r\n                            </Slide>\r\n                            <Slide className=\"slide-image-holder\" index={5}>\r\n                                <ImageWithZoom src={iceland} />\r\n                            </Slide>\r\n                            <Slide className=\"slide-image-holder\" index={6}>\r\n                                <ImageWithZoom src={grandcanyon} />\r\n                            </Slide>\r\n                        </Slider>\r\n                    </CarouselProvider>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    \r\n\r\n    render () {\r\n        const leadContent = this.getLeadContent()\r\n        const bodyContent = this.getBodyContent()\r\n\r\n        return (\r\n            <MDBContainer className=\"mt-5 text-center\">\r\n            <MDBRow>\r\n              <MDBCol>\r\n                <MDBJumbotron>\r\n                    <h2 className=\"h1 display-3\">{this.props.title}</h2>\r\n                    {leadContent}\r\n                    <hr className=\"my-2\" />\r\n                    {bodyContent}\r\n                </MDBJumbotron>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default MDBJumbotronV2","import React, { Component } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBTabPane, MDBTabContent, MDBNav, MDBNavItem, MDBNavLink } from \"mdbreact\";\r\nimport MDBJumbotron from '../MDBJumbotron/MDBJumbotron'\r\n\r\nclass Pills extends Component {\r\n  state = {\r\n    items: {\r\n      default: \"1\",\r\n    }\r\n  };\r\n\r\n  togglePills = (type, tab) => e => {\r\n    console.log(\"Toggling pill to state \" + tab)\r\n    console.log(this.state)\r\n    console.log(this.state.items['default'] === \"3\")\r\n    //e.preventDefault();\r\n    if (this.state.items[type] !== tab) {\r\n      let items = { ...this.state.items };\r\n      items[type] = tab;\r\n      this.setState({\r\n        items\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer className=\"mt-4\">\r\n          <MDBRow>\r\n            <MDBCol md=\"12\">\r\n              <h2>All things Dan To</h2>\r\n              <MDBNav className=\"mt-5 nav-pills\">\r\n                <MDBNavItem>\r\n                  <MDBNavLink to=\"#\" active={this.state.items[\"default\"] === \"1\"} onClick={this.togglePills(\"default\", \"1\")} >\r\n                    Quick Bio\r\n                  </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem>\r\n                  <MDBNavLink to=\"#\" active={this.state.items[\"default\"] === \"2\"} onClick={this.togglePills(\"default\", \"2\")} >\r\n                    Skills\r\n                  </MDBNavLink>\r\n                </MDBNavItem>\r\n                <MDBNavItem>\r\n                  <MDBNavLink to=\"#\" active={this.state.items[\"default\"] === \"3\"} onClick={this.togglePills(\"default\", \"3\")} >\r\n                    Interests\r\n                  </MDBNavLink>\r\n                </MDBNavItem>\r\n              </MDBNav>\r\n              <MDBTabContent activeItem={this.state.items[\"default\"]} className=\"mdb-tab-content\">\r\n                <MDBTabPane tabId=\"1\">\r\n                  <MDBJumbotron title=\"Hello Me!\" display={1}/>\r\n                </MDBTabPane>\r\n                <MDBTabPane tabId=\"2\">\r\n                  <MDBJumbotron title=\"Hello Skills!\" display={2}/>\r\n                </MDBTabPane>\r\n                <MDBTabPane tabId=\"3\">\r\n                  <MDBJumbotron title=\"Hello Interests!\" display={3}/>\r\n                </MDBTabPane>\r\n              </MDBTabContent>\r\n            </MDBCol>\r\n          </MDBRow>\r\n        </MDBContainer>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Pills;","import React from 'react'\r\nimport MDBPills from '../MDBPills/MDBPills'\r\nconst Aboutme = () => {\r\n    return (\r\n        <div>\r\n            <MDBPills />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Aboutme","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {MDBBtn} from 'mdbreact'\nimport {Route} from 'react-router-dom'\nimport Aboutme from './components/Aboutme/Aboutme'\n\nconst App = () => {\n    const [visible, setVisible] = useState(false)\n    const toggle = () => {\n        setVisible(!visible)\n    }\n\n    return (\n        \n        <div className=\"app-main-content\">\n            <div className=\"app-main-header\">\n                <h2> Welcome! </h2>\n            </div>\n            <div className=\"app-main-text\">\n                <p> You've arrived at the one stop shop for everything Dan To. </p>\n            </div>\n            {visible ?\n                <div className=\"app-main-hidden-content\">\n                    <MDBBtn gradient=\"blue\" href=\"/personalwebsite/about\">\n                        <Route path='/personalwebsite/about' component={Aboutme} />\n                        <h1><i>TELL ME MORE!</i></h1>\n                    </MDBBtn>  \n                </div>\n            : null }\n            <div className=\"app-main-logo\">\n                <MDBBtn outline onClick={toggle}>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </MDBBtn>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport {MDBBtn, MDBContainer} from 'mdbreact'\r\n\r\nclass Links extends React.Component {\r\n    render() {\r\n        return (\r\n            <MDBContainer className=\"links-content\">\r\n                <h2 className=\"links-header\">Want to know even more? <br/>\r\n                    Try the links below if you couldn't find your answer here! <br/>\r\n                    Thanks for visiting!</h2>\r\n                <MDBBtn className=\"links-linkedin\" color=\"primary\" href=\"https://www.linkedin.com/in/danhto\">\r\n                    LinkedIn\r\n                </MDBBtn>\r\n                <br/>\r\n                <MDBBtn className=\"links-github\" color=\"secondary\" href=\"https://github.com/danhto\">\r\n                    Github\r\n                </MDBBtn>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Links","import React from 'react'\r\nimport {MDBContainer,MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBFormInline,\r\n    MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem} from 'mdbreact'\r\n\r\nclass Navigation extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    toggleCollapse = () => {\r\n        this.setState ({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MDBContainer fluid>\r\n                <MDBNavbar color=\"indigo\" dark expand=\"md\">\r\n                <MDBNavbarBrand>\r\n                    <strong className=\"white-text\">DAN TO</strong>\r\n                </MDBNavbarBrand>\r\n                <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n                <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n                    <MDBNavbarNav left>\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"/personalwebsite\">Home</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"/personalwebsite/about\">About Me</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"/personalwebsite/links\">Links</MDBNavLink>\r\n                        </MDBNavItem>\r\n                    </MDBNavbarNav>\r\n                    <MDBNavbarNav right>\r\n                        <MDBNavItem>\r\n                            <MDBFormInline waves>\r\n                            <div className=\"md-form my-0\">\r\n                                <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            </div>\r\n                            </MDBFormInline>\r\n                        </MDBNavItem>\r\n                    </MDBNavbarNav>\r\n                </MDBCollapse>\r\n                </MDBNavbar>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport { MDBCard, MDBCardTitle, MDBCardText, MDBContainer } from \"mdbreact\";\r\nimport {geolocated, GeolocatedProps} from 'react-geolocated'\r\nimport axios from 'axios'\r\n\r\ntype Weather = {\r\n    locale: string,\r\n    country: string,\r\n    description: string,\r\n    icon: string,\r\n    temperature: number\r\n}\r\n\r\ninterface State {\r\n    weather: Weather,\r\n    dataReady: boolean,\r\n    errors: string\r\n}\r\n\r\nclass PanelPage extends React.Component<GeolocatedProps> {\r\n    state = {\r\n        weather: {\r\n            locale: \"unknown\",\r\n            country: \"unknown\",\r\n            description: \"unknown\",\r\n            icon: \"unknown\",\r\n            temperature: \"unknown\",\r\n        },\r\n        dataReady: false,\r\n        errors: \"\"\r\n    }    \r\n\r\n    formatTemperature = (temperature) => {\r\n        var color\r\n        if (temperature >= 30) {\r\n            color = \"red\"\r\n        }\r\n        else if (temperature >= 25 && temperature < 30) {\r\n            color = \"orange\"\r\n        }\r\n        else if (temperature >= 15 && temperature < 25) {\r\n            color = \"green\"\r\n        }\r\n        else if (temperature > 5 && temperature < 15) {\r\n            color = \"cyan\"\r\n        }\r\n        else {\r\n            color = \"blue\"\r\n        }\r\n\r\n        const pStyle = {\r\n            color: color\r\n        }\r\n\r\n        return (\r\n            <p className=\"temp-content-temperature\" style={pStyle}>{temperature} °C</p>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const getWeatherData = () => {\r\n            console.log(\"Getting weather data with state...\")\r\n            console.log(this.state)\r\n            if (this.props.coords && !this.state.dataReady && this.state.errors === \"\") {\r\n                console.log(\"Making api call...\")\r\n                var lattlong = 'lat=' + this.props.coords.latitude + '&lon=' + this.props.coords.longitude\r\n                var appId = \"&units=metric&APPID=\" + process.env.REACT_APP_WEATHER_API_KEY\r\n                axios.get(\"https://api.openweathermap.org/data/2.5/weather?\" + lattlong + appId)\r\n                .then(response => {\r\n                    console.log(response.data)\r\n                    this.setState ({\r\n                        weather: { \r\n                            locale: response.data.name,\r\n                            country: response.data.sys.country,\r\n                            description: response.data.weather[0].description,\r\n                            icon: \"http://openweathermap.org/img/wn/\" + response.data.weather[0].icon + \"@2x.png\",\r\n                            temperature: response.data.main.temp\r\n                        },\r\n                        dataReady: true\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    if (error.response.status === 429) {\r\n                        this.setState ({\r\n                            errors: \"Weather api request limits reached, cannot query local weather, but I hope it's pleasant!\"\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n\r\n            return true\r\n        }\r\n\r\n        return (\r\n            <MDBContainer>\r\n                <MDBCard className=\"card-body\" style={{ width: \"22rem\", marginTop: \"1rem\" }}>\r\n                    <MDBCardTitle className=\"panel-title\">Current Weather</MDBCardTitle>\r\n                    <MDBCardText>\r\n                        {   \r\n                            this.props.isGeolocationEnabled && this.props.coords && getWeatherData() && this.state.dataReady ?\r\n                            <div className=\"temp-content\">\r\n                                <p className=\"temp-content-location\">The current temperature for {this.state.weather.locale} is:</p>\r\n                                {this.formatTemperature(this.state.weather.temperature)}\r\n                                <p className=\"temp-content-description\">The overall forecast is {this.state.weather.description}:</p>\r\n                                <img className=\"temp-content-icon\" src={this.state.weather.icon} />\r\n                            </div> :\r\n                            <>No location data! {this.state.errors}</>\r\n                        }\r\n                    </MDBCardText>\r\n                </MDBCard>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default geolocated({\r\n    positionOptions: {\r\n        enableHighAccuracy: false,\r\n    },\r\n    userDecisionTimeout: 5000,\r\n})(PanelPage);","import React from 'react';\r\nimport { MDBCard, MDBCardTitle, MDBCardText, MDBContainer } from \"mdbreact\";\r\nimport axios from 'axios'\r\n\r\ntype starship = {\r\n    cargo_capacity: string, //The maximum number of kilograms that this starship can transport\r\n    cost_in_credits: string, //The cost of this starship new, in galactic credits\r\n    crew: string, // The number of personnel needed to run or pilot this starship\r\n    length: string, //The length of this starship in meters\r\n    model: string, //The model or official name of this starship\r\n    name: string, //The name of this starship\r\n    passengers: string, //The number of non-essential people this starship can transport\r\n    starship_class: string //The class of this starship\r\n}\r\n\r\ntype people = {\r\n    birth_year: string,\r\n    gender: string,\r\n    hair_color: string,\r\n    height: string,\r\n    mass: string,\r\n    name: string,\r\n    skin_color: string,\r\n    homeworld: planet,\r\n    species: species,\r\n}\r\n\r\ntype species = {\r\n    name: string,\r\n}\r\n\r\ntype planet = {\r\n    climate: string,\r\n    diameter: string,\r\n    name: string,\r\n    population: string,\r\n    terrain: string,\r\n}\r\n\r\ninterface Props {\r\n    api: string,\r\n}\r\n\r\ninterface State {\r\n    index: number,\r\n    dataRetrieved: boolean,\r\n    planet: planet,\r\n    person: people,\r\n    starship: starship,\r\n    errors: string\r\n}\r\n\r\nclass MDBPanelStarwars extends React.Component<Props, State> {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            index: Math.floor(Math.random() * 40),\r\n            dataRetrieved: false,\r\n            planet: {} as planet,\r\n            person: {} as people,\r\n            starship: {} as starship,\r\n            errors: \"\",\r\n        } \r\n    }   \r\n\r\n    getStarwarsData = () => {\r\n        axios.get(\"https://swapi.co/api/\"+this.props.api+\"/\"+this.state.index+\"/\")\r\n        .then(response => {\r\n            console.log(\"Response received from call to api for \" + this.props.api + \" using id \" + this.state.index)\r\n            console.log(response)\r\n\r\n            switch (this.props.api) {\r\n                case \"people\": {\r\n                    this.setState({\r\n                        person: {\r\n                            birth_year: response.data.birth_year,\r\n                            gender: response.data.gender,\r\n                            hair_color: response.data.hair_color,\r\n                            height: response.data.height,\r\n                            mass: response.data.mass,\r\n                            name: response.data.name,\r\n                            skin_color: response.data.skin_color,\r\n                            homeworld: response.data.homeworld,\r\n                            species: response.data.species,\r\n                        },\r\n                        dataRetrieved: true\r\n                    })\r\n                    return\r\n                }\r\n                case \"planet\": {\r\n                    this.setState({\r\n                        planet: {\r\n                            climate: response.data.climate,\r\n                            diameter: response.data.diameter,\r\n                            name: response.data.name,\r\n                            population: response.data.population,\r\n                            terrain: response.data.terrain,\r\n\r\n                        },\r\n                        dataRetrieved: true\r\n                    })\r\n                    return\r\n                }\r\n                case \"starships\": {\r\n                    this.setState({\r\n                        starship: {\r\n                            cargo_capacity: response.data.cargo_capacity, //The maximum number of kilograms that this starship can transport\r\n                            cost_in_credits: response.data.cost_in_credits, //The cost of this starship new, in galactic credits\r\n                            crew: response.data.crew, // The number of personnel needed to run or pilot this starship\r\n                            length: response.data.length, //The length of this starship in meters\r\n                            model: response.data.model, //The model or official name of this starship\r\n                            name: response.data.name, //The name of this starship\r\n                            passengers: response.data.passengers, //The number of non-essential people this starship can transport\r\n                            starship_class: response.data.starship_class //The class of this starship\r\n                        },\r\n                        dataRetrieved: true\r\n                    })\r\n                    return\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            this.setState({\r\n                errors: \"Something happened can't get Star Wars goodies :(\"\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getStarwarsData()\r\n    }\r\n\r\n    render() {\r\n        const getStarwarsContent = () => {\r\n            switch (this.props.api) {\r\n                case \"people\": {\r\n                    const pData = this.state.person\r\n\r\n                    return (\r\n                        <>\r\n                            <div className=\"starwars-person-title\">\r\n                                <h3 className=\"starwars-name\">\r\n                                    {pData.name}\r\n                                </h3>\r\n                                <img src=\"https://1001freedownloads.s3.amazonaws.com/vector/thumb/74889/1367934593.png\" className=\"starwars-content-person-icon\" /> \r\n                            </div>\r\n                            <p className=\"starwars-content-data\">\r\n                                {pData.name} was born in the year {pData.birth_year}.\r\n                                {pData.gender == \"male\" ? \" He \" : \" She \"} weighs {pData.mass} kg and is {pData.height} cm tall. \r\n                            </p>\r\n                        </>\r\n                    )\r\n                }\r\n                case \"starships\": {\r\n                    const sData = this.state.starship\r\n\r\n                    return (\r\n                        <>\r\n                        <div className=\"starwars-person-title\">\r\n                            <h3 className=\"starwars-name\">\r\n                                {sData.name}\r\n                            </h3>\r\n                            <img src=\"http://clipart-library.com/images/rijKoRLjT.png\" className=\"starwars-content-starship-icon\" /> \r\n                        </div>\r\n                        <p className=\"starwars-content-data\">\r\n                            Cost in galatic credits {sData.cost_in_credits} <br/>\r\n                            Crew size needed to run starship {sData.crew} <br/>\r\n                            Length in meters {sData.length} m <br/>\r\n                            Offical name {sData.model} <br/>\r\n                            Starship class: {sData.starship_class} <br/>\r\n                        </p>\r\n                    </>\r\n                    )\r\n                }\r\n            }            \r\n                \r\n        }\r\n\r\n        return (\r\n            <MDBContainer>\r\n                <MDBCard className=\"card-body\" style={{ width: \"22rem\", marginTop: \"1rem\" }}>\r\n                    <MDBCardTitle className=\"panel-title\">Star Wars: Random Daily Education!</MDBCardTitle>\r\n                    <MDBCardText>\r\n                        {   \r\n                            this.state.dataRetrieved ?\r\n                            <div className=\"starwars-content\">\r\n                                {getStarwarsContent()}\r\n                            </div> :\r\n                            <>{this.state.errors}</>\r\n                        }\r\n                    </MDBCardText>\r\n                </MDBCard>\r\n            </MDBContainer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MDBPanelStarwars","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport Aboutme from './components/Aboutme/Aboutme'\nimport Links from './components/Links/Links'\nimport Navigation from './components/Navigation/Navigation'\nimport MDBPanel from './components/MDBPanel/MDBPanel'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport './components/MDBPills/MDBPills.css'\nimport './components/MDBJumbotron/MDBJumbotron.css'\nimport 'pure-react-carousel/dist/react-carousel.es.css';\nimport './components/Links/Links.css'\nimport MDBPanelStarwars from './components/MDBPanel/MDBPanelStarwars';\nimport './components/MDBPanel/MDBPanelStarwars.css'\nimport { Redirect } from 'react-router';\n\nReactDOM.render(<BrowserRouter>\n                    <div>\n                        <Navigation />\n                        <div className='main-content'>\n                            <div className='main-panel-content'>\n                                <Switch>\n                                    <Route exact path='/personalwebsite'  component={App} />\n                                    <Route path='/personalwebsite/about' component={Aboutme} />\n                                    <Route path='/personalwebsite/links' component={Links} />\n                                    <Redirect from=\"/\" to=\"/personalwebsite\" />\n                                </Switch>\n                            </div>\n                            <div className='side-panel-content'>\n                                <MDBPanel />\n                                <MDBPanelStarwars api=\"people\"/>\n                                <MDBPanelStarwars api=\"starships\"/>\n                            </div>\n                        </div>\n                    </div>\n                </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}